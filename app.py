from flask import Flask, request, jsonify
from flask_cors import CORS, cross_origin
from transformers import pipeline
import json
from dotenv import load_dotenv
import os

load_dotenv()

from openai import OpenAI

app = Flask(__name__)
CORS(app, support_credentials=True)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if OPENAI_API_KEY == None:
    raise Exception("Sorry, OPENAI API KEY not available.")

client = OpenAI(api_key=OPENAI_API_KEY)

emotion_pipeline = pipeline("text-classification", model="j-hartmann/emotion-english-distilroberta-base", top_k=5)


@app.route("/generatePoem", methods=['POST'])
@cross_origin(supports_credentials=True)
def generate_poem():

    try:
        # Extract data from the request
        data = request.json
        prompt = data.get('input')

        # Call OpenAI API
        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": "Compose a short poem with the given topic, word or keywords (max 10 lines) - "+prompt},
            ]
        )

        response = completion.choices[0].message.content

        # Return the text generated by OpenAI
        return jsonify({"response": response})

    except Exception as e:
        return jsonify({"error": str(e)}), 500
    
@app.route("/emotionAnalysis", methods=['POST'])
@cross_origin(supports_credentials=True)
def emotion_analysis():
    txt = json.loads(request.data).get('input')
    emo = emotion_pipeline(txt)
    return emo[0] if emo != None and len(emo) >=0 else []

if __name__ == "__main__":
    app.run(debug=True)